# Quality Gates Configuration Example - ALL FEATURES
# Add this to your .sugar/config.yaml file

quality_gates:
  enabled: true  # Master switch for all quality gates

  # ============================================================================
  # PHASE 1: Critical Features
  # ============================================================================

  # Feature 1: Mandatory Test Execution
  # Ensures tests are run and pass before allowing commits
  mandatory_testing:
    enabled: true
    block_commits: true  # Prevent git commit if tests not run or failed

    # Test commands for different scenarios
    test_commands:
      default: "pytest"  # Default test command
      unit: "pytest tests/unit"
      integration: "pytest tests/integration"
      system: "pytest tests/system"

    # Auto-detect which tests to run based on changed files
    auto_detect_required_tests:
      enabled: true
      patterns:
        - pattern: "app/controllers/**/*.py"
          required_tests: ["integration", "system"]
        - pattern: "app/models/**/*.py"
          required_tests: ["unit", "integration"]
        - pattern: "app/views/**/*"
          required_tests: ["system"]

    # Validation rules for test output
    validation:
      require_zero_failures: true
      require_zero_errors: true
      allow_pending: true  # Pending tests are okay
      max_warnings: 10

    # Test evidence storage
    evidence:
      store_test_output: true
      path: ".sugar/test_evidence/{task_id}.txt"
      include_in_commit_message: true

  # Feature 8: Truth Enforcement
  # Requires proof for all claims of success
  truth_enforcement:
    enabled: true
    mode: "strict"  # strict | permissive
    block_unproven_success: true

    # Define rules for what proof is required for each claim
    rules:
      - claim: "all tests pass"
        proof_required: "test_execution_evidence"
        must_show:
          exit_code: 0
          failures: 0
          errors: 0

      - claim: "functionality verified"
        proof_required: "functional_verification_evidence"
        must_show:
          http_request_results: "all_success"

      - claim: "success criteria met"
        proof_required: "success_criteria_verification"
        must_show:
          all_criteria_verified: true

  # ============================================================================
  # PHASE 2: High Priority Features
  # ============================================================================

  # Feature 2: Functional Verification Layer
  # Verifies that fixes actually work in the running application
  functional_verification:
    enabled: true
    required: true  # Block completion without verification

    methods:
      http_requests:
        enabled: true
        tool: "curl"
        timeout: 10

      browser_automation:
        enabled: false  # Requires MCP Chrome DevTools integration
        tools: ["mcp__chrome-devtools"]
        screenshot_on_verification: true
        screenshot_path: ".sugar/verification/{task_id}/"

      database_queries:
        enabled: false  # Requires implementation
        require_evidence: true

    # Auto-detect verification needs based on changed files
    auto_detect:
      enabled: true
      patterns:
        - pattern: "app/controllers/**/*.py"
          verification: "http_requests"
          test_urls: ["/"]
          expected_status: [200, 302]

        - pattern: "config/routes.py"
          verification: "http_requests"
          action: "extract_new_routes_and_test"

        - pattern: "app/templates/**/*.html"
          verification: "browser_automation"
          action: "screenshot_and_validate"

# ============================================================================
# PHASE 2: Pre-Flight Checks (Feature 6)
# ============================================================================
pre_flight_checks:
  enabled: true
  block_execution_if_failed: true

  checks:
    # Check if development server is running
    - name: "dev_server_running"
      type: "port_check"
      port: 8000
      host: "localhost"
      required_for: ["ui_changes", "api_changes", "route_changes"]

    # Check if database is accessible
    - name: "database_accessible"
      type: "command"
      command: "python manage.py check --database default"
      timeout: 10
      required_for: ["model_changes", "migration_changes"]

    # Check if test suite is runnable
    - name: "test_suite_runnable"
      type: "command"
      command: "pytest --collect-only"
      timeout: 30
      required_for: ["all_tasks"]

    # Check if required tools are available
    - name: "required_tools_available"
      type: "tool_check"
      tools: ["python", "pytest", "curl"]
      required_for: ["all_tasks"]

    # Check git working directory state
    - name: "git_clean_state"
      type: "git_status"
      allow_untracked: true
      allow_unstaged: false
      required_for: ["all_tasks"]

    # Check required config files exist
    - name: "config_files_exist"
      type: "file_exists"
      file_path: ".sugar/config.yaml"
      required_for: ["all_tasks"]

# ============================================================================
# PHASE 3: Enhancement Features
# ============================================================================

# Feature 7: Verification Failure Handling
verification_failure_handling:
  enabled: true

  # How to handle test failures
  on_test_failure:
    action: "retry"
    max_retries: 2
    retry_with_more_context: true

    escalate:
      enabled: true
      action: "create_detailed_failure_report"
      report_path: ".sugar/failures/{task_id}.md"
      include_evidence: true

  # How to handle functional verification failures
  on_functional_verification_failure:
    action: "retry"
    max_retries: 1

    # Collect enhanced debugging information
    enhanced_debugging:
      - "capture_server_logs"
      - "capture_network_requests"
      - "capture_database_state"

    escalate:
      action: "mark_task_as_needs_manual_review"
      notify_user: true

  # How to handle unmet success criteria
  on_success_criteria_not_met:
    action: "fail_task"
    do_not_commit: true
    create_failure_report: true

# Feature 10: Work Diff Validation
git_diff_validation:
  enabled: true

  before_commit:
    # Validate that changed files match expectations
    validate_files_changed:
      enabled: true
      allowed_files: "from task.files_to_modify.expected"
      allow_additional_files: false

    # Limit size of changes to prevent massive commits
    max_lines_changed: 500
    warn_if_exceeds: 200

    # Check for patterns that shouldn't be in commits
    disallow_patterns:
      - pattern: "debugger"
        reason: "Debug statement left in code"
      - pattern: "console\\.log"
        reason: "Console.log left in code"
      - pattern: "binding\\.pry"
        reason: "Binding.pry left in code"
      - pattern: "import pdb"
        reason: "pdb import left in code"
      - pattern: "TODO:"
        reason: "TODO comment left in code"

    # Handle unexpected file changes
    if_unexpected_files_changed:
      action: "require_justification"
      prompt: "Why were these additional files changed?"

# Example: Task with Success Criteria (Feature 3)
# When adding tasks, include verifiable success criteria:
#
# task:
#   title: "Fix /login redirect issue"
#   type: "bug_fix"
#   success_criteria:
#     - type: "http_status"
#       url: "http://localhost:3000/login"
#       expected: 200
#
#     - type: "http_no_redirect"
#       url: "http://localhost:3000/login"
#       disallowed_status: [301, 302, 303, 307, 308]
#
#     - type: "test_suite"
#       command: "pytest tests/test_login.py"
#       expected_failures: 0
#       expected_errors: 0
